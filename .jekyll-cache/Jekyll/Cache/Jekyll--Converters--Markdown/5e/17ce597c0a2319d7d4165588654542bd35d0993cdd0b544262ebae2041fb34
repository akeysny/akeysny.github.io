I"O
<h2 id="background">Background</h2>
<p>Of the numerous vulnerabilities related to browser-based web applications, cross-site scripting (XSS) is one of the most common and damaging vulnerabilities. The browser is a sophisticated piece of software, not just because it must render content efficiently and portably, but it must also execute associated JavaScript. As a general rule, any system that executes code can be made to execute malicious code if proper protections aren’t used. XSS is a technique in which an attacker is able to “trick” a browser into executing malicious JavaScript that’s not part of the legitimate page. Even though web developers have known about it for years, it’s still easy to let an XSS vulnerability slip through the cracks.</p>

<h2 id="the-webpage">The webpage</h2>
<p><img src="/img/posts/web-security/cyber.jpeg" alt="IMDb page" /></p>

<h2 id="types-of-xss">Types of XSS</h2>
<p>There are three types of Cross-Site Scripting.</p>

<ul>
  <li>Reflected</li>
</ul>

<p>Data from URLs or forms
Runs immediately when data is received</p>

<ul>
  <li>Stored</li>
</ul>

<p>Data from database, cookies, and sessions
Runs later when data is retrieved</p>

<ul>
  <li>DOM-based</li>
</ul>

<p>Data generated by JavaScript
Runs when user triggers JavaScript events</p>

<p>##Reflected XSS</p>

<p>Reflected XSS is when the script runs immediately in the victim’s browser. The JavaScript being run would be included in the URL data or form data. It is called “reflected” because it bounces right back. In a well-designed attack, the user will not even notice that the script has run.</p>

<p>As an example, imagine a search box at the top of a website. When a user submits a search term, the application searches the database for products matching that term. If no products are found, it responds with:</p>

<h1>No results were found for: <?php echo $term; ?></h1>
<p>If the search request was:</p>

<p>GET /search.php?term=candy
The application would return:</p>

<h1>No results were found for: candy</h1>
<p>Notice that the data being submitted in the URL query is not being sanitized to remove or disable JavaScript before it is output to HTML.</p>

<p>A malicious request like:</p>

<p>GET /search.php?term=<script>alert('XSS!');</script>
Would output this code in the HTML sent to the browser:</p>

<h1>No results were found for: <script>alert('XSS!');</script></h1>
<p>Sending a simple JavaScript alert, like the one above, is one of the easiest ways to test for XSS vulnerabilities. However, it is important to realize that the JavaScript code between the script tags could be anything.</p>
:ET