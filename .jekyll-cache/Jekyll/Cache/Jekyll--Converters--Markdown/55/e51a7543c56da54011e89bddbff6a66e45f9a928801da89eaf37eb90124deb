I"z<h2 id="background">Background</h2>
<p>Of the numerous vulnerabilities related to browser-based web applications, cross-site scripting (XSS) is one of the most common and damaging vulnerabilities. The browser is a sophisticated piece of software, not just because it must render content efficiently and portably, but it must also execute associated JavaScript. As a general rule, any system that executes code can be made to execute malicious code if proper protections aren’t used. XSS is a technique in which an attacker is able to “trick” a browser into executing malicious JavaScript that’s not part of the legitimate page. Even though web developers have known about it for years, it’s still easy to let an XSS vulnerability slip through the cracks.</p>

<p><img src="/img/posts/web-security/cyber.jpeg" alt="IMDb page" /></p>

<h2 id="types-of-xss">Types of XSS</h2>
<p>There are three types of Cross-Site Scripting.</p>

<ul>
  <li>Reflected</li>
</ul>

<p>Data from URLs or forms
Runs immediately when data is received</p>

<p>As an example, imagine a search box at the top of a website. When a user submits a search term, the application searches the database for products matching that term. If no products are found, it responds with:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">No</span> <span class="n">results</span> <span class="n">were</span> <span class="n">found</span> <span class="ss">for: </span><span class="o">&lt;</span><span class="p">?</span><span class="n">php</span> <span class="n">echo</span> <span class="vg">$term</span><span class="p">;</span> <span class="sc">?&gt;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span></code></pre></figure>

<p>If the search request was:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">GET</span> <span class="sr">/search.php?term=candy</span></code></pre></figure>

<p>The application would return:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">No</span> <span class="n">results</span> <span class="n">were</span> <span class="n">found</span> <span class="ss">for: </span><span class="n">candy</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span></code></pre></figure>

<p>Notice that the data being submitted in the URL query is not being sanitized to remove or disable JavaScript before it is output to HTML.</p>

<ul>
  <li>Stored</li>
</ul>

<p>Data from database, cookies, and sessions
Runs later when data is retrieved</p>

<ul>
  <li>DOM-based</li>
</ul>

<p>Data generated by JavaScript
Runs when user triggers JavaScript events</p>

<h2 id="a-positive-xss-prevention-model">A Positive XSS Prevention Model</h2>

:ET